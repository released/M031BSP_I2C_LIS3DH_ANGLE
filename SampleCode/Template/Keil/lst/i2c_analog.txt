; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_analog.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_analog.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\i2c_analog.crf ..\i2c_analog.c]
                          THUMB

                          AREA ||i.I2C_ANALOG_Delay||, CODE, READONLY, ALIGN=1

                  I2C_ANALOG_Delay PROC
;;;12     
;;;13     void I2C_ANALOG_Delay(void)
000000  200a              MOVS     r0,#0xa
                  |L1.2|
;;;14     {
;;;15     	uint16_t i = 10;
000002  1e40              SUBS     r0,r0,#1
;;;16     	while (i)
;;;17     	{
;;;18     		i--;
000004  b280              UXTH     r0,r0
;;;19     		__asm("nop");
000006  bf00              NOP      
000008  2800              CMP      r0,#0                 ;16
00000a  d1fa              BNE      |L1.2|
;;;20     	}
;;;21     }
00000c  4770              BX       lr
;;;22     
                          ENDP


                          AREA ||i.I2C_ANALOG_GPIO_Init||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_GPIO_Init PROC
;;;6      
;;;7      void I2C_ANALOG_GPIO_Init(void)
000000  4802              LDR      r0,|L2.12|
;;;8      {
;;;9      	SET_SDA;
000002  2101              MOVS     r1,#1
000004  6001              STR      r1,[r0,#0]
;;;10     	SET_SCL; 
000006  6041              STR      r1,[r0,#4]
;;;11     }
000008  4770              BX       lr
;;;12     
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_ReadData||, CODE, READONLY, ALIGN=1

                  I2C_ANALOG_ReadData PROC
;;;172    
;;;173    uint8_t I2C_ANALOG_ReadData(uint8_t SlaveAddress,uint8_t REG_Address)
000000  b530              PUSH     {r4,r5,lr}
;;;174    { 
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;175         uint8_t REG_data;
;;;176         I2C_ANALOG_Start();                          
000006  f7fffffe          BL       I2C_ANALOG_Start
;;;177         I2C_ANALOG_SendByte(SlaveAddress);           
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       I2C_ANALOG_SendByte
;;;178         I2C_ANALOG_SendByte(REG_Address);              
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       I2C_ANALOG_SendByte
;;;179         I2C_ANALOG_Start();                          
000016  f7fffffe          BL       I2C_ANALOG_Start
00001a  1c64              ADDS     r4,r4,#1
;;;180         I2C_ANALOG_SendByte(SlaveAddress+1);         
00001c  b2e0              UXTB     r0,r4
00001e  f7fffffe          BL       I2C_ANALOG_SendByte
;;;181         REG_data = I2C_ANALOG_RecvByte();            
000022  f7fffffe          BL       I2C_ANALOG_RecvByte
000026  4603              MOV      r3,r0
;;;182         I2C_ANALOG_SendACK();  
000028  f7fffffe          BL       I2C_ANALOG_SendACK
;;;183         I2C_ANALOG_Stop();                           
00002c  f7fffffe          BL       I2C_ANALOG_Stop
;;;184      	return REG_data;
000030  4618              MOV      r0,r3
;;;185    }
000032  bd30              POP      {r4,r5,pc}
;;;186    
                          ENDP


                          AREA ||i.I2C_ANALOG_ReadMulti||, CODE, READONLY, ALIGN=1

                  I2C_ANALOG_ReadMulti PROC
;;;232    
;;;233    uint8_t I2C_ANALOG_ReadMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;234    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  460c              MOV      r4,r1
000008  4607              MOV      r7,r0
;;;235    	#if 1
;;;236    	while(count) 
;;;237    	{
;;;238    		*data++=I2C_ANALOG_ReadData(address,reg++); 
;;;239    		count--; 
00000a  e009              B        |L4.32|
                  |L4.12|
00000c  4621              MOV      r1,r4                 ;238
00000e  1c64              ADDS     r4,r4,#1              ;238
000010  b2e4              UXTB     r4,r4                 ;238
000012  4638              MOV      r0,r7                 ;238
000014  f7fffffe          BL       I2C_ANALOG_ReadData
000018  1e6d              SUBS     r5,r5,#1              ;238
00001a  7030              STRB     r0,[r6,#0]            ;238
00001c  b2ad              UXTH     r5,r5
00001e  1c76              ADDS     r6,r6,#1
                  |L4.32|
000020  2d00              CMP      r5,#0                 ;236
000022  d1f3              BNE      |L4.12|
;;;240    	}
;;;241    	
;;;242    	#else
;;;243        if (I2C_ANALOG_Start()!=I2C_ANALOG_BUS_READY)
;;;244        {
;;;245            return I2C_ANALOG_GPIO_DeInit(I2C_ANALOG_GPIO_SDA,I2C_ANALOG_GPIO_SCL);
;;;246        }	
;;;247    	
;;;248        I2C_ANALOG_SendByte(address);
;;;249        if (!I2C_ANALOG_WaitACK())
;;;250        {
;;;251            I2C_ANALOG_Stop();
;;;252            return I2C_ANALOG_GPIO_DeInit(I2C_ANALOG_GPIO_SDA,I2C_ANALOG_GPIO_SCL);
;;;253        }
;;;254        I2C_ANALOG_SendByte(reg);
;;;255        I2C_ANALOG_WaitACK();
;;;256        I2C_ANALOG_Start();
;;;257        I2C_ANALOG_SendByte(address+1);
;;;258        I2C_ANALOG_WaitACK();
;;;259        while (count) 
;;;260        {
;;;261            *data = I2C_ANALOG_RecvByte();
;;;262            if (count == 1)
;;;263            {
;;;264                I2C_ANALOG_SendNACK();
;;;265            }
;;;266            else
;;;267            {
;;;268                I2C_ANALOG_SendACK();
;;;269            }
;;;270            data++;
;;;271            count--;
;;;272        }
;;;273        I2C_ANALOG_Stop();
;;;274        #endif
;;;275    	
;;;276        return I2C_ANALOG_BUS_READY;
000024  2000              MOVS     r0,#0
;;;277    }
000026  bdf0              POP      {r4-r7,pc}
;;;278    
                          ENDP


                          AREA ||i.I2C_ANALOG_RecvByte||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_RecvByte PROC
;;;141    
;;;142    uint8_t I2C_ANALOG_RecvByte(void)
000000  b530              PUSH     {r4,r5,lr}
;;;143    {
;;;144         uint8_t i,Dat = 0;
000002  2100              MOVS     r1,#0
;;;145         SET_SDA;
000004  4b0b              LDR      r3,|L5.52|
000006  2401              MOVS     r4,#1
000008  601c              STR      r4,[r3,#0]
;;;146         RESET_SCL;
00000a  460d              MOV      r5,r1
00000c  6059              STR      r1,[r3,#4]
;;;147         Dat = 0;
;;;148         for(i=0; i<8; i++)
00000e  460a              MOV      r2,r1
                  |L5.16|
;;;149         {
;;;150               SET_SCL;          
000010  605c              STR      r4,[r3,#4]
;;;151               I2C_ANALOG_DELAY;
000012  f7fffffe          BL       I2C_ANALOG_Delay
;;;152               Dat <<= 1;
000016  0648              LSLS     r0,r1,#25
000018  0e01              LSRS     r1,r0,#24
;;;153               if(I2C_ANALOG_SDA_STATE)
00001a  6818              LDR      r0,[r3,#0]
00001c  2800              CMP      r0,#0
00001e  d000              BEQ      |L5.34|
;;;154               {
;;;155                    Dat|=0x01;
000020  4321              ORRS     r1,r1,r4
                  |L5.34|
;;;156               }  
;;;157               RESET_SCL;         
000022  605d              STR      r5,[r3,#4]
;;;158               I2C_ANALOG_DELAY;               
000024  f7fffffe          BL       I2C_ANALOG_Delay
000028  1c52              ADDS     r2,r2,#1
00002a  b2d2              UXTB     r2,r2                 ;148
00002c  2a08              CMP      r2,#8                 ;148
00002e  d3ef              BCC      |L5.16|
;;;159         }
;;;160         return Dat;
000030  4608              MOV      r0,r1
;;;161    }
000032  bd30              POP      {r4,r5,pc}
;;;162    
                          ENDP

                  |L5.52|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_SendACK||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_SendACK PROC
;;;70     
;;;71     void I2C_ANALOG_SendACK(void)
000000  b500              PUSH     {lr}
;;;72     {
;;;73          SET_SDA;
000002  4906              LDR      r1,|L6.28|
000004  2201              MOVS     r2,#1
000006  600a              STR      r2,[r1,#0]
;;;74          I2C_ANALOG_DELAY;
000008  f7fffffe          BL       I2C_ANALOG_Delay
;;;75          SET_SCL;
00000c  604a              STR      r2,[r1,#4]
;;;76          I2C_ANALOG_DELAY;
00000e  f7fffffe          BL       I2C_ANALOG_Delay
;;;77          RESET_SCL;
000012  2000              MOVS     r0,#0
000014  6048              STR      r0,[r1,#4]
;;;78          I2C_ANALOG_DELAY;
000016  f7fffffe          BL       I2C_ANALOG_Delay
;;;79     }
00001a  bd00              POP      {pc}
;;;80     
                          ENDP

                  |L6.28|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_SendByte||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_SendByte PROC
;;;102    
;;;103    uint8_t I2C_ANALOG_SendByte(uint8_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;104    {
;;;105         uint8_t i;
;;;106         RESET_SCL;
000002  4b13              LDR      r3,|L7.80|
000004  2400              MOVS     r4,#0
000006  4602              MOV      r2,r0                 ;104
000008  605c              STR      r4,[r3,#4]
;;;107         for(i=0;i<8;i++)
00000a  4621              MOV      r1,r4
;;;108         { 
;;;109    		if(Data & 0x80)
;;;110    		{
;;;111    		    SET_SDA;
00000c  2501              MOVS     r5,#1
                  |L7.14|
00000e  0610              LSLS     r0,r2,#24             ;109
000010  d501              BPL      |L7.22|
000012  601d              STR      r5,[r3,#0]
000014  e000              B        |L7.24|
                  |L7.22|
;;;112    		}
;;;113    		else
;;;114    		{
;;;115    		    RESET_SDA;
000016  601c              STR      r4,[r3,#0]
                  |L7.24|
;;;116    		}
;;;117    		Data <<= 1;
000018  0650              LSLS     r0,r2,#25
00001a  0e02              LSRS     r2,r0,#24
;;;118    		I2C_ANALOG_DELAY;
00001c  f7fffffe          BL       I2C_ANALOG_Delay
;;;119    
;;;120    		SET_SCL;
000020  605d              STR      r5,[r3,#4]
;;;121    		I2C_ANALOG_DELAY;
000022  f7fffffe          BL       I2C_ANALOG_Delay
;;;122    		RESET_SCL;
000026  605c              STR      r4,[r3,#4]
;;;123    		I2C_ANALOG_DELAY;
000028  f7fffffe          BL       I2C_ANALOG_Delay
00002c  1c49              ADDS     r1,r1,#1
00002e  b2c9              UXTB     r1,r1                 ;107
000030  2908              CMP      r1,#8                 ;107
000032  d3ec              BCC      |L7.14|
;;;124         }
;;;125    
;;;126         SET_SDA;
000034  601d              STR      r5,[r3,#0]
;;;127         I2C_ANALOG_DELAY;
000036  f7fffffe          BL       I2C_ANALOG_Delay
;;;128         SET_SCL;
00003a  605d              STR      r5,[r3,#4]
;;;129         I2C_ANALOG_DELAY;  
00003c  f7fffffe          BL       I2C_ANALOG_Delay
;;;130         if(I2C_ANALOG_SDA_STATE)
000040  6818              LDR      r0,[r3,#0]
;;;131         {
;;;132               RESET_SCL;
;;;133               return I2C_ANALOG_NACK;
;;;134         }
;;;135         else
;;;136         {
;;;137               RESET_SCL;
000042  605c              STR      r4,[r3,#4]
000044  2800              CMP      r0,#0                 ;130
000046  d001              BEQ      |L7.76|
000048  2000              MOVS     r0,#0                 ;133
;;;138               return I2C_ANALOG_ACK; 
;;;139         }   
;;;140    }
00004a  bd30              POP      {r4,r5,pc}
                  |L7.76|
00004c  2001              MOVS     r0,#1                 ;138
00004e  bd30              POP      {r4,r5,pc}
;;;141    
                          ENDP

                  |L7.80|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_SendNACK||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_SendNACK PROC
;;;60     
;;;61     void I2C_ANALOG_SendNACK(void)
000000  b500              PUSH     {lr}
;;;62     {
;;;63          RESET_SDA;
000002  4906              LDR      r1,|L8.28|
000004  2200              MOVS     r2,#0
000006  600a              STR      r2,[r1,#0]
;;;64          I2C_ANALOG_DELAY;
000008  f7fffffe          BL       I2C_ANALOG_Delay
;;;65          SET_SCL;
00000c  2001              MOVS     r0,#1
00000e  6048              STR      r0,[r1,#4]
;;;66          I2C_ANALOG_DELAY;
000010  f7fffffe          BL       I2C_ANALOG_Delay
;;;67          RESET_SCL;
000014  604a              STR      r2,[r1,#4]
;;;68          I2C_ANALOG_DELAY;
000016  f7fffffe          BL       I2C_ANALOG_Delay
;;;69     }
00001a  bd00              POP      {pc}
;;;70     
                          ENDP

                  |L8.28|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_Start||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_Start PROC
;;;22     
;;;23     uint8_t I2C_ANALOG_Start(void)
000000  b500              PUSH     {lr}
;;;24     {
;;;25          SET_SDA;
000002  490c              LDR      r1,|L9.52|
000004  2201              MOVS     r2,#1
000006  600a              STR      r2,[r1,#0]
;;;26          I2C_ANALOG_DELAY;
000008  f7fffffe          BL       I2C_ANALOG_Delay
;;;27     
;;;28          SET_SCL;
00000c  604a              STR      r2,[r1,#4]
;;;29          I2C_ANALOG_DELAY;
00000e  f7fffffe          BL       I2C_ANALOG_Delay
;;;30     
;;;31          if ( !I2C_ANALOG_SDA_STATE )
000012  6808              LDR      r0,[r1,#0]
000014  2800              CMP      r0,#0
000016  d00b              BEQ      |L9.48|
;;;32          {
;;;33               return I2C_ANALOG_BUS_BUSY;
;;;34          }
;;;35     
;;;36          RESET_SDA;
000018  2200              MOVS     r2,#0
00001a  600a              STR      r2,[r1,#0]
;;;37          I2C_ANALOG_DELAY;
00001c  f7fffffe          BL       I2C_ANALOG_Delay
;;;38     
;;;39          RESET_SCL;
000020  604a              STR      r2,[r1,#4]
;;;40          I2C_ANALOG_DELAY;
000022  f7fffffe          BL       I2C_ANALOG_Delay
;;;41     
;;;42          if (I2C_ANALOG_SDA_STATE)
000026  6808              LDR      r0,[r1,#0]
000028  2800              CMP      r0,#0
00002a  d000              BEQ      |L9.46|
;;;43          {
;;;44               return I2C_ANALOG_BUS_ERROR;
00002c  2002              MOVS     r0,#2
                  |L9.46|
;;;45          }
;;;46     
;;;47          return I2C_ANALOG_BUS_READY;
;;;48     }
00002e  bd00              POP      {pc}
                  |L9.48|
000030  2001              MOVS     r0,#1                 ;33
000032  bd00              POP      {pc}
;;;49     
                          ENDP

                  |L9.52|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_Stop||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_Stop PROC
;;;49     
;;;50     void I2C_ANALOG_Stop(void)
000000  b500              PUSH     {lr}
;;;51     {
;;;52          RESET_SDA;
000002  4906              LDR      r1,|L10.28|
000004  2000              MOVS     r0,#0
000006  6008              STR      r0,[r1,#0]
;;;53          I2C_ANALOG_DELAY;
000008  f7fffffe          BL       I2C_ANALOG_Delay
;;;54          SET_SCL;
00000c  2201              MOVS     r2,#1
00000e  604a              STR      r2,[r1,#4]
;;;55          I2C_ANALOG_DELAY;
000010  f7fffffe          BL       I2C_ANALOG_Delay
;;;56          SET_SDA;
000014  600a              STR      r2,[r1,#0]
;;;57          I2C_ANALOG_DELAY;
000016  f7fffffe          BL       I2C_ANALOG_Delay
;;;58     }
00001a  bd00              POP      {pc}
;;;59     
                          ENDP

                  |L10.28|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_WaitACK||, CODE, READONLY, ALIGN=2

                  I2C_ANALOG_WaitACK PROC
;;;80     
;;;81     uint8_t I2C_ANALOG_WaitACK(void)
000000  b500              PUSH     {lr}
;;;82     {
;;;83         RESET_SCL;
000002  490c              LDR      r1,|L11.52|
000004  2200              MOVS     r2,#0
000006  604a              STR      r2,[r1,#4]
;;;84         I2C_ANALOG_DELAY;
000008  f7fffffe          BL       I2C_ANALOG_Delay
;;;85         SET_SDA;
00000c  2301              MOVS     r3,#1
00000e  600b              STR      r3,[r1,#0]
;;;86         I2C_ANALOG_DELAY;
000010  f7fffffe          BL       I2C_ANALOG_Delay
;;;87         SET_SCL; 	 
000014  604b              STR      r3,[r1,#4]
;;;88         I2C_ANALOG_DELAY;
000016  f7fffffe          BL       I2C_ANALOG_Delay
;;;89     	
;;;90         if (I2C_ANALOG_SDA_STATE)
00001a  6808              LDR      r0,[r1,#0]
;;;91         {
;;;92             RESET_SCL;
;;;93             I2C_ANALOG_DELAY;
;;;94             return I2C_ANALOG_BUS_ERROR;
;;;95         }
;;;96     
;;;97         RESET_SCL;
00001c  604a              STR      r2,[r1,#4]
00001e  2800              CMP      r0,#0                 ;90
000020  d003              BEQ      |L11.42|
000022  f7fffffe          BL       I2C_ANALOG_Delay
000026  2002              MOVS     r0,#2                 ;94
;;;98         I2C_ANALOG_DELAY;
;;;99         
;;;100        return I2C_ANALOG_BUS_READY;
;;;101    }
000028  bd00              POP      {pc}
                  |L11.42|
00002a  f7fffffe          BL       I2C_ANALOG_Delay
00002e  2000              MOVS     r0,#0                 ;100
000030  bd00              POP      {pc}
;;;102    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      0x40004880

                          AREA ||i.I2C_ANALOG_WriteData||, CODE, READONLY, ALIGN=1

                  I2C_ANALOG_WriteData PROC
;;;162    
;;;163    void I2C_ANALOG_WriteData(uint8_t SlaveAddress,uint8_t REG_Address,uint8_t REG_data)
000000  b530              PUSH     {r4,r5,lr}
;;;164    {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4603              MOV      r3,r0
;;;165         I2C_ANALOG_Start();                  
000008  f7fffffe          BL       I2C_ANALOG_Start
;;;166         I2C_ANALOG_SendByte(SlaveAddress);   
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       I2C_ANALOG_SendByte
;;;167         I2C_ANALOG_SendByte(REG_Address);    
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       I2C_ANALOG_SendByte
;;;168         I2C_ANALOG_SendByte(REG_data);       
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       I2C_ANALOG_SendByte
;;;169         I2C_ANALOG_Stop();                   
00001e  f7fffffe          BL       I2C_ANALOG_Stop
;;;170    }
000022  bd30              POP      {r4,r5,pc}
;;;171    
                          ENDP


                          AREA ||i.I2C_ANALOG_WriteMulti||, CODE, READONLY, ALIGN=1

                  I2C_ANALOG_WriteMulti PROC
;;;187    
;;;188    uint8_t I2C_ANALOG_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;189    {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  4607              MOV      r7,r0
;;;190    
;;;191    	#if 1
;;;192    	while(count--) 
;;;193    	{ 
;;;194    		I2C_ANALOG_WriteData(address,reg,*data); 
;;;195    		reg++; 
;;;196    		data++; 
00000a  e007              B        |L13.28|
                  |L13.12|
00000c  782a              LDRB     r2,[r5,#0]            ;194
00000e  4631              MOV      r1,r6                 ;194
000010  4638              MOV      r0,r7                 ;194
000012  f7fffffe          BL       I2C_ANALOG_WriteData
000016  1c76              ADDS     r6,r6,#1              ;194
000018  b2f6              UXTB     r6,r6                 ;195
00001a  1c6d              ADDS     r5,r5,#1              ;195
                  |L13.28|
00001c  4620              MOV      r0,r4                 ;192
00001e  1e64              SUBS     r4,r4,#1              ;192
000020  b2a4              UXTH     r4,r4                 ;192
000022  2800              CMP      r0,#0                 ;192
000024  d1f2              BNE      |L13.12|
;;;197    	}
;;;198    
;;;199    
;;;200    	#else
;;;201        uint16_t i;
;;;202    	
;;;203        if (I2C_ANALOG_Start()!=I2C_ANALOG_BUS_READY)
;;;204        {
;;;205            return I2C_ANALOG_GPIO_DeInit(I2C_ANALOG_GPIO_SDA,I2C_ANALOG_GPIO_SCL);
;;;206        }
;;;207        I2C_ANALOG_SendByte(address);
;;;208        if (!I2C_ANALOG_WaitACK())
;;;209        {
;;;210            I2C_ANALOG_Stop();
;;;211            return I2C_ANALOG_BUS_ERROR;
;;;212        }
;;;213        
;;;214        I2C_ANALOG_SendByte(reg);
;;;215        I2C_ANALOG_WaitACK();
;;;216        
;;;217        for (i = 0; i < count; i++) 
;;;218        {
;;;219            I2C_ANALOG_SendByte(data[i]);
;;;220            if (!I2C_ANALOG_WaitACK()) 
;;;221    		{
;;;222                I2C_ANALOG_Stop();
;;;223                return I2C_ANALOG_GPIO_DeInit(I2C_ANALOG_GPIO_SDA,I2C_ANALOG_GPIO_SCL);
;;;224            }
;;;225        }
;;;226        
;;;227        I2C_ANALOG_Stop();
;;;228    	#endif
;;;229        
;;;230        return I2C_ANALOG_BUS_READY; 
;;;231    }
000026  bdf0              POP      {r4-r7,pc}
;;;232    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\i2c_analog.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_i2c_analog_c_cbf0e515____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_i2c_analog_c_cbf0e515____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_i2c_analog_c_cbf0e515____REVSH|
#line 402
|__asm___12_i2c_analog_c_cbf0e515____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
