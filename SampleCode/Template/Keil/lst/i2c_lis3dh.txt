; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_lis3dh.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_lis3dh.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\i2c_lis3dh.crf ..\I2C_LIS3DH.c]
                          THUMB

                          AREA ||i.Angle_Calculate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_f
                          REQUIRE _printf_s
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_str
                  Angle_Calculate PROC
;;;174    
;;;175    void Angle_Calculate(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;176    {  
;;;177    	#if 1	//Tilt Test.xlsx @Yiven
;;;178    
;;;179    	if (FlagSwitch)
000002  4c3b              LDR      r4,|L1.240|
000004  7820              LDRB     r0,[r4,#0]  ; FlagSwitch
000006  2800              CMP      r0,#0
000008  d00f              BEQ      |L1.42|
;;;180    	{
;;;181    		printf("Accelerometer(mg):     X-axis : %5d, ",(int16_t)LIS3DH_accx);
00000a  2102              MOVS     r1,#2
00000c  5e61              LDRSH    r1,[r4,r1]  ; LIS3DH_accx
00000e  a039              ADR      r0,|L1.244|
000010  f7fffffe          BL       __2printf
;;;182    		printf(" Y-axis : %5d,  ",(int16_t)LIS3DH_accy);
000014  2104              MOVS     r1,#4
000016  5e61              LDRSH    r1,[r4,r1]  ; LIS3DH_accy
000018  a040              ADR      r0,|L1.284|
00001a  f7fffffe          BL       __2printf
;;;183    		printf(" Z-axis :  %5d \n\r",(int16_t)LIS3DH_accz);
00001e  2106              MOVS     r1,#6
000020  5e61              LDRSH    r1,[r4,r1]  ; LIS3DH_accz
000022  a043              ADR      r0,|L1.304|
000024  f7fffffe          BL       __2printf
;;;184    	}
;;;185    	else
;;;186    	{
;;;187    		float s1 = 0;
;;;188    		float s2 = 0;	
;;;189    
;;;190    		s1 = sqrt((float)((LIS3DH_accy*LIS3DH_accy)+(LIS3DH_accz*LIS3DH_accz)));
;;;191    		s2 = sqrt((float)((LIS3DH_accx*LIS3DH_accx)+(LIS3DH_accz*LIS3DH_accz)));
;;;192    
;;;193    		PitchAng = atan(LIS3DH_accx/s1)*180/PI;
;;;194    		RollAng = atan(LIS3DH_accy/s2)*180/PI;
;;;195    
;;;196    		printf("%s:RollAng(%10.3lf),PitchAng(%10.3lf)\r\n",__FUNCTION__,RollAng,PitchAng);
;;;197    	}
;;;198    	
;;;199    	#endif
;;;200    	
;;;201    	#if 0
;;;202    /*
;;;203    	http://stackoverflow.com/questions/3755059/3d-accelerometer-calculate-the-orientation
;;;204    
;;;205    	Roll = atan2(Y, Z) * 180/M_PI;
;;;206    	Pitch = atan2(-X, sqrt(Y*Y + Z*Z)) * 180/M_PI;
;;;207    	Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf 
;;;208    */
;;;209    
;;;210    
;;;211    	RollAng= atan2(LIS3DH_accy, LIS3DH_accz) * 180/PI;
;;;212    	PitchAng = atan2(-LIS3DH_accz, sqrt(LIS3DH_accy*LIS3DH_accy + LIS3DH_accz*LIS3DH_accz)) * 180/PI;
;;;213    
;;;214    	printf("%s:RollAng(%10.3lf),PitchAng(%10.3lf)\r\n",__FUNCTION__,RollAng,PitchAng);
;;;215    	#endif
;;;216    	
;;;217    	#if 0
;;;218        RollAng  = 180.0*atan(LIS3DH_accy/sqrt((float)(LIS3DH_accx*LIS3DH_accx+LIS3DH_accz*LIS3DH_accz)))/PI;       
;;;219        PitchAng = -180.0*atan(LIS3DH_accx/sqrt((float)(LIS3DH_accz*LIS3DH_accz+LIS3DH_accy*LIS3DH_accy)))/PI;
;;;220        if(LIS3DH_accz<0)
;;;221    	{
;;;222            if(LIS3DH_accy>0)
;;;223    		{
;;;224    			RollAng  = 180.0 -RollAng;
;;;225    		}
;;;226            else 
;;;227    		{
;;;228    			RollAng  = -(RollAng+180.0);
;;;229    		}
;;;230        }
;;;231    	printf("%s:RollAng(%10.3lf),PitchAng(%10.3lf)\r\n",__FUNCTION__,RollAng,PitchAng);
;;;232    	#endif
;;;233    	
;;;234    	#if 0
;;;235    	LIS3DH_accx /= 100.0f;
;;;236    	LIS3DH_accy /= 100.0f;
;;;237    	LIS3DH_accz /= 100.0f;	
;;;238    
;;;239    	fNormAcc = sqrt((LIS3DH_accx*LIS3DH_accx)+(LIS3DH_accy*LIS3DH_accy)+(LIS3DH_accz*LIS3DH_accz));
;;;240    
;;;241    	fSinRoll = -LIS3DH_accy/fNormAcc;
;;;242    	fCosRoll = sqrt(1.0-(fSinRoll * fSinRoll));
;;;243    	fSinPitch = LIS3DH_accx/fNormAcc;
;;;244    	fCosPitch = sqrt(1.0-(fSinPitch * fSinPitch));
;;;245    	if ( fSinRoll >0)
;;;246    	{
;;;247    		if (fCosRoll>0)
;;;248    		{
;;;249    			RollAng = acos(fCosRoll)*180/PI;
;;;250    		}
;;;251    		else
;;;252    		{
;;;253    			RollAng = acos(fCosRoll)*180/PI + 180;
;;;254    		}
;;;255    	}
;;;256    	else
;;;257    	{
;;;258    		if (fCosRoll>0)
;;;259    		{
;;;260    			RollAng = acos(fCosRoll)*180/PI + 360;
;;;261    		}
;;;262    		else
;;;263    		{
;;;264    			RollAng = acos(fCosRoll)*180/PI + 180;
;;;265    		}
;;;266    	}
;;;267    
;;;268    	if ( fSinPitch >0)
;;;269    	{
;;;270    		if (fCosPitch>0)
;;;271    		{
;;;272    			PitchAng = acos(fCosPitch)*180/PI;
;;;273    		}
;;;274    		else
;;;275    		{
;;;276    			PitchAng = acos(fCosPitch)*180/PI + 180;
;;;277    		}
;;;278    	}
;;;279    	else
;;;280    	{
;;;281    		if (fCosPitch>0)
;;;282    		{
;;;283    			PitchAng = acos(fCosPitch)*180/PI + 360;
;;;284    		}
;;;285    		else
;;;286    		{
;;;287    			PitchAng = acos(fCosPitch)*180/PI + 180;
;;;288    		}
;;;289    	}
;;;290    
;;;291    	if (RollAng >=360)
;;;292    	{
;;;293    		RollAng = RollAng - 360;
;;;294    	}
;;;295    
;;;296    	if (PitchAng >=360)
;;;297    	{
;;;298    		PitchAng = PitchAng - 360;
;;;299    	}
;;;300    
;;;301    	printf("%s:RollAng(%10.3lf),PitchAng(%10.3lf)\r\n",__FUNCTION__,RollAng,PitchAng);
;;;302    
;;;303    	#endif
;;;304    }
000028  bdfe              POP      {r1-r7,pc}
                  |L1.42|
00002a  2004              MOVS     r0,#4                 ;190
00002c  2106              MOVS     r1,#6                 ;190
00002e  5e20              LDRSH    r0,[r4,r0]            ;190  ; LIS3DH_accy
000030  5e61              LDRSH    r1,[r4,r1]            ;190  ; LIS3DH_accz
000032  4340              MULS     r0,r0,r0              ;190
000034  4349              MULS     r1,r1,r1              ;190
000036  1840              ADDS     r0,r0,r1              ;190
000038  f7fffffe          BL       __aeabi_i2f
00003c  f7fffffe          BL       __aeabi_f2d
000040  f7fffffe          BL       sqrt
000044  f7fffffe          BL       __aeabi_d2f
000048  4606              MOV      r6,r0                 ;190
00004a  2002              MOVS     r0,#2                 ;191
00004c  2106              MOVS     r1,#6                 ;191
00004e  5e20              LDRSH    r0,[r4,r0]            ;191  ; LIS3DH_accx
000050  5e61              LDRSH    r1,[r4,r1]            ;191  ; LIS3DH_accz
000052  4340              MULS     r0,r0,r0              ;191
000054  4349              MULS     r1,r1,r1              ;191
000056  1840              ADDS     r0,r0,r1              ;191
000058  f7fffffe          BL       __aeabi_i2f
00005c  f7fffffe          BL       __aeabi_f2d
000060  f7fffffe          BL       sqrt
000064  f7fffffe          BL       __aeabi_d2f
000068  4605              MOV      r5,r0                 ;191
00006a  2002              MOVS     r0,#2                 ;193
00006c  5e20              LDRSH    r0,[r4,r0]            ;193  ; LIS3DH_accx
00006e  f7fffffe          BL       __aeabi_i2f
000072  4631              MOV      r1,r6                 ;193
000074  f7fffffe          BL       __aeabi_fdiv
000078  f7fffffe          BL       __aeabi_f2d
00007c  f7fffffe          BL       atan
000080  4e30              LDR      r6,|L1.324|
000082  2200              MOVS     r2,#0                 ;193
000084  4633              MOV      r3,r6                 ;193
000086  f7fffffe          BL       __aeabi_dmul
00008a  2203              MOVS     r2,#3                 ;193
00008c  0752              LSLS     r2,r2,#29             ;193
00008e  4b2e              LDR      r3,|L1.328|
000090  f7fffffe          BL       __aeabi_ddiv
000094  f7fffffe          BL       __aeabi_d2f
000098  4607              MOV      r7,r0                 ;193
00009a  60e0              STR      r0,[r4,#0xc]          ;194  ; PitchAng
00009c  2004              MOVS     r0,#4                 ;194
00009e  5e20              LDRSH    r0,[r4,r0]            ;194  ; LIS3DH_accy
0000a0  f7fffffe          BL       __aeabi_i2f
0000a4  4629              MOV      r1,r5                 ;194
0000a6  f7fffffe          BL       __aeabi_fdiv
0000aa  f7fffffe          BL       __aeabi_f2d
0000ae  f7fffffe          BL       atan
0000b2  2200              MOVS     r2,#0                 ;194
0000b4  4633              MOV      r3,r6                 ;194
0000b6  f7fffffe          BL       __aeabi_dmul
0000ba  2203              MOVS     r2,#3                 ;194
0000bc  0752              LSLS     r2,r2,#29             ;194
0000be  4b22              LDR      r3,|L1.328|
0000c0  f7fffffe          BL       __aeabi_ddiv
0000c4  f7fffffe          BL       __aeabi_d2f
0000c8  4606              MOV      r6,r0                 ;194
0000ca  60a0              STR      r0,[r4,#8]            ;194  ; RollAng
0000cc  4638              MOV      r0,r7                 ;194
0000ce  f7fffffe          BL       __aeabi_f2d
0000d2  4604              MOV      r4,r0                 ;196
0000d4  460d              MOV      r5,r1                 ;196
0000d6  4630              MOV      r0,r6                 ;196
0000d8  f7fffffe          BL       __aeabi_f2d
0000dc  460b              MOV      r3,r1                 ;196
0000de  4602              MOV      r2,r0                 ;196
0000e0  491a              LDR      r1,|L1.332|
0000e2  a01b              ADR      r0,|L1.336|
0000e4  9501              STR      r5,[sp,#4]            ;196
0000e6  9400              STR      r4,[sp,#0]            ;196
0000e8  f7fffffe          BL       __2printf
0000ec  bdfe              POP      {r1-r7,pc}
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      ||area_number.14||
                  |L1.244|
0000f4  41636365          DCB      "Accelerometer(mg):     X-axis : %5d, ",0
0000f8  6c65726f
0000fc  6d657465
000100  72286d67
000104  293a2020
000108  20202058
00010c  2d617869
000110  73203a20
000114  2535642c
000118  2000    
00011a  00                DCB      0
00011b  00                DCB      0
                  |L1.284|
00011c  20592d61          DCB      " Y-axis : %5d,  ",0
000120  78697320
000124  3a202535
000128  642c2020
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L1.304|
000130  205a2d61          DCB      " Z-axis :  %5d \n\r",0
000134  78697320
000138  3a202025
00013c  3564200a
000140  0d00    
000142  00                DCB      0
000143  00                DCB      0
                  |L1.324|
                          DCD      0x40668000
                  |L1.328|
                          DCD      0x400921fb
                  |L1.332|
                          DCD      ||.constdata||
                  |L1.336|
000150  25733a52          DCB      "%s:RollAng(%10.3lf),PitchAng(%10.3lf)\r\n",0
000154  6f6c6c41
000158  6e672825
00015c  31302e33
000160  6c66292c
000164  50697463
000168  68416e67
00016c  28253130
000170  2e336c66
000174  290d0a00

                          AREA ||i.GetDataLIS3DH||, CODE, READONLY, ALIGN=2

                  GetDataLIS3DH PROC
;;;134    
;;;135    uint16_t GetDataLIS3DH(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;136    {
;;;137    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;138    	int16_t ax_s,ay_s,az_s;
;;;139    //	uint16_t i=0;
;;;140    	uint8_t u8WaitCnt=0;
000002  2400              MOVS     r4,#0
;;;141    
;;;142    	do{
;;;143    		LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_STATUS_REG2, 1,&tmp);	
000004  4d31              LDR      r5,|L2.204|
000006  b087              SUB      sp,sp,#0x1c           ;136
000008  2618              MOVS     r6,#0x18
                  |L2.10|
00000a  6928              LDR      r0,[r5,#0x10]
00000c  ab06              ADD      r3,sp,#0x18
00000e  4330              ORRS     r0,r0,r6
000010  b2c0              UXTB     r0,r0
000012  2201              MOVS     r2,#1
000014  2127              MOVS     r1,#0x27
000016  f7fffffe          BL       LIS3DH_Read
;;;144    		if (u8WaitCnt++>30)
00001a  4620              MOV      r0,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  b2e4              UXTB     r4,r4
000020  281e              CMP      r0,#0x1e
000022  d803              BHI      |L2.44|
;;;145    			break;		
;;;146    	}while(!(tmp & LIS3DH_BIT3));
000024  4668              MOV      r0,sp
000026  7e00              LDRB     r0,[r0,#0x18]
000028  0700              LSLS     r0,r0,#28
00002a  d5ee              BPL      |L2.10|
                  |L2.44|
;;;147    
;;;148    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_OUT_X_H, 1, &tmpxh);
00002c  6928              LDR      r0,[r5,#0x10]
00002e  ab01              ADD      r3,sp,#4
000030  4330              ORRS     r0,r0,r6
000032  b2c0              UXTB     r0,r0
000034  2201              MOVS     r2,#1
000036  2129              MOVS     r1,#0x29
000038  f7fffffe          BL       LIS3DH_Read
;;;149    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_OUT_X_L, 1, &tmpxl);
00003c  6928              LDR      r0,[r5,#0x10]
00003e  466b              MOV      r3,sp
000040  4330              ORRS     r0,r0,r6
000042  b2c0              UXTB     r0,r0
000044  2201              MOVS     r2,#1
000046  2128              MOVS     r1,#0x28
000048  f7fffffe          BL       LIS3DH_Read
;;;150    	ax_s=(((int16_t) ((tmpxh << 8) | tmpxl)) >> 4);
00004c  4669              MOV      r1,sp
00004e  7908              LDRB     r0,[r1,#4]
000050  7809              LDRB     r1,[r1,#0]
000052  0200              LSLS     r0,r0,#8
000054  4308              ORRS     r0,r0,r1
000056  0400              LSLS     r0,r0,#16
000058  1507              ASRS     r7,r0,#20
;;;151    
;;;152    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_OUT_Y_H, 1, &tmpyh);
00005a  6928              LDR      r0,[r5,#0x10]
00005c  ab03              ADD      r3,sp,#0xc
00005e  4330              ORRS     r0,r0,r6
000060  b2c0              UXTB     r0,r0
000062  2201              MOVS     r2,#1
000064  212b              MOVS     r1,#0x2b
000066  f7fffffe          BL       LIS3DH_Read
;;;153    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_OUT_Y_L, 1, &tmpyl);
00006a  6928              LDR      r0,[r5,#0x10]
00006c  ab02              ADD      r3,sp,#8
00006e  4330              ORRS     r0,r0,r6
000070  b2c0              UXTB     r0,r0
000072  2201              MOVS     r2,#1
000074  212a              MOVS     r1,#0x2a
000076  f7fffffe          BL       LIS3DH_Read
;;;154    	ay_s=(((int16_t) ((tmpyh << 8) | tmpyl)) >> 4);
00007a  4669              MOV      r1,sp
00007c  7b08              LDRB     r0,[r1,#0xc]
00007e  7a09              LDRB     r1,[r1,#8]
000080  0200              LSLS     r0,r0,#8
000082  4308              ORRS     r0,r0,r1
000084  0400              LSLS     r0,r0,#16
000086  1504              ASRS     r4,r0,#20
;;;155    
;;;156    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_OUT_Z_H, 1, &tmpzh);
000088  6928              LDR      r0,[r5,#0x10]
00008a  ab05              ADD      r3,sp,#0x14
00008c  4330              ORRS     r0,r0,r6
00008e  b2c0              UXTB     r0,r0
000090  2201              MOVS     r2,#1
000092  212d              MOVS     r1,#0x2d
000094  f7fffffe          BL       LIS3DH_Read
;;;157    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_OUT_Z_L, 1, &tmpzl);
000098  6928              LDR      r0,[r5,#0x10]
00009a  ab04              ADD      r3,sp,#0x10
00009c  4330              ORRS     r0,r0,r6
00009e  b2c0              UXTB     r0,r0
0000a0  2201              MOVS     r2,#1
0000a2  212c              MOVS     r1,#0x2c
0000a4  f7fffffe          BL       LIS3DH_Read
;;;158    	az_s=(((int16_t) ((tmpzh << 8) | tmpzl)) >> 4);
0000a8  4669              MOV      r1,sp
0000aa  7d08              LDRB     r0,[r1,#0x14]
0000ac  7c09              LDRB     r1,[r1,#0x10]
0000ae  0200              LSLS     r0,r0,#8
0000b0  4308              ORRS     r0,r0,r1
0000b2  0400              LSLS     r0,r0,#16
0000b4  1501              ASRS     r1,r0,#20
;;;159    
;;;160    	#if 0	//debug
;;;161    	printf("Accelerometer(mg):     X-axis : %5d, ",(int16_t)ax_s);
;;;162    	printf(" Y-axis : %5d,  ",(int16_t)ay_s);
;;;163    	printf(" Z-axis :  %5d \n\r",(int16_t)az_s);
;;;164    	#endif
;;;165    
;;;166    	LIS3DH_accx = ax_s ;
0000b6  4806              LDR      r0,|L2.208|
0000b8  8047              STRH     r7,[r0,#2]
;;;167    	LIS3DH_accy = ay_s ;
0000ba  8084              STRH     r4,[r0,#4]
;;;168    	LIS3DH_accz = az_s ;
0000bc  80c1              STRH     r1,[r0,#6]
;;;169    	
;;;170    //	LIS3DH_Delay(0xFFFF);
;;;171    	LIS3DH_Delay(5);
0000be  2005              MOVS     r0,#5
0000c0  f7fffffe          BL       LIS3DH_Delay
;;;172    	return 0;
0000c4  2000              MOVS     r0,#0
;;;173    }
0000c6  b007              ADD      sp,sp,#0x1c
0000c8  bdf0              POP      {r4-r7,pc}
;;;174    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L2.204|
                          DCD      0x40004880
                  |L2.208|
                          DCD      ||area_number.14||

                          AREA ||i.I2C_STOP||, CODE, READONLY, ALIGN=1

                  I2C_STOP PROC
;;;281     */
;;;282    __STATIC_INLINE void I2C_STOP(I2C_T *i2c)
000000  6801              LDR      r1,[r0,#0]
;;;283    {
;;;284    
;;;285        (i2c)->CTL0 |= (I2C_CTL0_SI_Msk | I2C_CTL0_STO_Msk);
000002  2218              MOVS     r2,#0x18
000004  4311              ORRS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
                  |L3.8|
;;;286        while(i2c->CTL0 & I2C_CTL0_STO_Msk) {
000008  6801              LDR      r1,[r0,#0]
00000a  06c9              LSLS     r1,r1,#27
00000c  d4fc              BMI      |L3.8|
;;;287        }
;;;288    }
00000e  4770              BX       lr
;;;289    
                          ENDP


                          AREA ||i.I2C_readBytes||, CODE, READONLY, ALIGN=1

                  I2C_readBytes PROC
;;;18     
;;;19     void I2C_readBytes(I2C_T *i2c, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) 
000000  b570              PUSH     {r4-r6,lr}
;;;20     {
;;;21     	uint8_t i, tmp;
;;;22     	I2C_START(i2c);                         //Start
000002  9c04              LDR      r4,[sp,#0x10]
000004  6805              LDR      r5,[r0,#0]
000006  2628              MOVS     r6,#0x28
000008  4335              ORRS     r5,r5,r6
00000a  6005              STR      r5,[r0,#0]
                  |L4.12|
;;;23     	I2C_WAIT_READY(i2c);
00000c  6805              LDR      r5,[r0,#0]
00000e  072d              LSLS     r5,r5,#28
000010  d5fc              BPL      |L4.12|
;;;24     
;;;25     	I2C_SET_DATA(i2c, devAddr);         //send slave address+W
000012  6081              STR      r1,[r0,#8]
;;;26     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000014  6806              LDR      r6,[r0,#0]
000016  253c              MOVS     r5,#0x3c
000018  43ae              BICS     r6,r6,r5
00001a  3608              ADDS     r6,r6,#8
00001c  6006              STR      r6,[r0,#0]
                  |L4.30|
;;;27     	I2C_WAIT_READY(i2c);
00001e  6806              LDR      r6,[r0,#0]
000020  0736              LSLS     r6,r6,#28
000022  d5fc              BPL      |L4.30|
;;;28     
;;;29     	I2C_SET_DATA(i2c, regAddr);        //send index
000024  6082              STR      r2,[r0,#8]
;;;30     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000026  6802              LDR      r2,[r0,#0]
000028  43aa              BICS     r2,r2,r5
00002a  3208              ADDS     r2,r2,#8
00002c  6002              STR      r2,[r0,#0]
                  |L4.46|
;;;31     	I2C_WAIT_READY(i2c);
00002e  6802              LDR      r2,[r0,#0]
000030  0712              LSLS     r2,r2,#28
000032  d5fc              BPL      |L4.46|
;;;32     
;;;33     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_STA | I2C_CTL_SI);	//Start
000034  6802              LDR      r2,[r0,#0]
000036  43aa              BICS     r2,r2,r5
000038  3228              ADDS     r2,r2,#0x28
00003a  6002              STR      r2,[r0,#0]
                  |L4.60|
;;;34     	I2C_WAIT_READY(i2c);
00003c  6802              LDR      r2,[r0,#0]
00003e  0712              LSLS     r2,r2,#28
000040  d5fc              BPL      |L4.60|
000042  1c49              ADDS     r1,r1,#1
;;;35     
;;;36     	I2C_SET_DATA(i2c, (devAddr+1));    //send slave address+R
000044  6081              STR      r1,[r0,#8]
;;;37     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000046  6801              LDR      r1,[r0,#0]
000048  43a9              BICS     r1,r1,r5
00004a  3108              ADDS     r1,r1,#8
00004c  6001              STR      r1,[r0,#0]
                  |L4.78|
;;;38     	I2C_WAIT_READY(i2c);							
00004e  6801              LDR      r1,[r0,#0]
000050  0709              LSLS     r1,r1,#28
000052  d5fc              BPL      |L4.78|
;;;39     
;;;40     	for (i=0; i<length; i++) {
000054  2100              MOVS     r1,#0
000056  e00a              B        |L4.110|
                  |L4.88|
;;;41     		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000058  6802              LDR      r2,[r0,#0]
00005a  43aa              BICS     r2,r2,r5
00005c  3208              ADDS     r2,r2,#8
00005e  6002              STR      r2,[r0,#0]
                  |L4.96|
;;;42     		I2C_WAIT_READY(i2c);							
000060  6802              LDR      r2,[r0,#0]
000062  0712              LSLS     r2,r2,#28
000064  d5fc              BPL      |L4.96|
;;;43     		tmp = I2C_GET_DATA(i2c);           //read data   
000066  6882              LDR      r2,[r0,#8]
;;;44     		data[i]=tmp;
000068  5462              STRB     r2,[r4,r1]
00006a  1c49              ADDS     r1,r1,#1
00006c  b2c9              UXTB     r1,r1                 ;40
                  |L4.110|
00006e  4299              CMP      r1,r3                 ;40
000070  d3f2              BCC      |L4.88|
;;;45     	}
;;;46     	I2C_STOP(i2c);										 //Stop
000072  f7fffffe          BL       I2C_STOP
;;;47     }
000076  bd70              POP      {r4-r6,pc}
;;;48     
                          ENDP


                          AREA ||i.I2C_writeBytes||, CODE, READONLY, ALIGN=1

                  I2C_writeBytes PROC
;;;48     
;;;49     void I2C_writeBytes(I2C_T *i2c, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) 
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
;;;51     	uint8_t i;
;;;52     	uint32_t tmp;
;;;53     	I2C_START(i2c);                    //Start
000002  9c04              LDR      r4,[sp,#0x10]
000004  6805              LDR      r5,[r0,#0]
000006  2628              MOVS     r6,#0x28
000008  4335              ORRS     r5,r5,r6
00000a  6005              STR      r5,[r0,#0]
                  |L5.12|
;;;54     	I2C_WAIT_READY(i2c);
00000c  6805              LDR      r5,[r0,#0]
00000e  072d              LSLS     r5,r5,#28
000010  d5fc              BPL      |L5.12|
;;;55     
;;;56     	I2C_SET_DATA(i2c, devAddr);        //send slave address
000012  6081              STR      r1,[r0,#8]
;;;57     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000014  6801              LDR      r1,[r0,#0]
000016  253c              MOVS     r5,#0x3c
000018  43a9              BICS     r1,r1,r5
00001a  3108              ADDS     r1,r1,#8
00001c  6001              STR      r1,[r0,#0]
                  |L5.30|
;;;58     	I2C_WAIT_READY(i2c);
00001e  6801              LDR      r1,[r0,#0]
000020  0709              LSLS     r1,r1,#28
000022  d5fc              BPL      |L5.30|
;;;59     
;;;60     	I2C_SET_DATA(i2c, regAddr);        //send index
000024  6082              STR      r2,[r0,#8]
;;;61     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000026  6801              LDR      r1,[r0,#0]
000028  43a9              BICS     r1,r1,r5
00002a  3108              ADDS     r1,r1,#8
00002c  6001              STR      r1,[r0,#0]
                  |L5.46|
;;;62     	I2C_WAIT_READY(i2c);	
00002e  6801              LDR      r1,[r0,#0]
000030  0709              LSLS     r1,r1,#28
000032  d5fc              BPL      |L5.46|
;;;63     
;;;64     	for (i=0; i<length; i++) {
000034  2100              MOVS     r1,#0
000036  e00a              B        |L5.78|
                  |L5.56|
;;;65     		tmp = data[i];
000038  5c62              LDRB     r2,[r4,r1]
;;;66     		I2C_SET_DATA(i2c, tmp);            //send Data
00003a  6082              STR      r2,[r0,#8]
;;;67     		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
00003c  6802              LDR      r2,[r0,#0]
00003e  43aa              BICS     r2,r2,r5
000040  3208              ADDS     r2,r2,#8
000042  6002              STR      r2,[r0,#0]
                  |L5.68|
;;;68     		I2C_WAIT_READY(i2c);
000044  6802              LDR      r2,[r0,#0]
000046  0712              LSLS     r2,r2,#28
000048  d5fc              BPL      |L5.68|
00004a  1c49              ADDS     r1,r1,#1
00004c  b2c9              UXTB     r1,r1                 ;64
                  |L5.78|
00004e  4299              CMP      r1,r3                 ;64
000050  d3f2              BCC      |L5.56|
;;;69     	}
;;;70     
;;;71     	I2C_STOP(i2c);										 //Stop
000052  f7fffffe          BL       I2C_STOP
;;;72     }
000056  bd70              POP      {r4-r6,pc}
;;;73     
                          ENDP


                          AREA ||i.LIS3DH_Delay||, CODE, READONLY, ALIGN=1

                  LIS3DH_Delay PROC
;;;75     
;;;76     void LIS3DH_Delay(uint16_t nCount)
000000  e001              B        |L6.6|
                  |L6.2|
;;;77     {
;;;78         /* Decrement nCount value */
;;;79         while (nCount != 0)
;;;80         {
;;;81             nCount--;
000002  1e40              SUBS     r0,r0,#1
000004  b280              UXTH     r0,r0
                  |L6.6|
000006  2800              CMP      r0,#0                 ;79
000008  d1fb              BNE      |L6.2|
;;;82         }
;;;83     }
00000a  4770              BX       lr
;;;84     
                          ENDP


                          AREA ||i.LIS3DH_Read||, CODE, READONLY, ALIGN=2

                  LIS3DH_Read PROC
;;;84     
;;;85     void LIS3DH_Read(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b508              PUSH     {r3,lr}
;;;86                                   uint16_t NumByteToRead,
;;;87                                   uint8_t* pBuffer)
;;;88     {
;;;89     
;;;90     	#if defined (I2C_ANALOG)
;;;91     
;;;92     	I2C_ANALOG_ReadMulti(DeviceAddr, RegisterAddr, pBuffer, NumByteToRead);
;;;93     
;;;94     	#else
;;;95     	
;;;96     	I2C_ReadMultiBytesOneReg(I2C0, DeviceAddr, RegisterAddr, pBuffer, NumByteToRead);	
000002  9200              STR      r2,[sp,#0]
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  4801              LDR      r0,|L7.16|
00000a  f7fffffe          BL       I2C_ReadMultiBytesOneReg
;;;97     //	*pBuffer = I2C_ReadByteOneReg(I2C0, DeviceAddr, RegisterAddr);
;;;98     //	I2C_readBytes(I2C0, DeviceAddr, RegisterAddr, NumByteToRead, pBuffer);
;;;99     	
;;;100    	#endif
;;;101    }
00000e  bd08              POP      {r3,pc}
;;;102    void LIS3DH_Write(uint8_t DeviceAddr, uint8_t RegisterAddr,
                          ENDP

                  |L7.16|
                          DCD      0x40080000

                          AREA ||i.LIS3DH_Write||, CODE, READONLY, ALIGN=2

                  LIS3DH_Write PROC
;;;101    }
;;;102    void LIS3DH_Write(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b508              PUSH     {r3,lr}
;;;103                                   uint16_t NumByteToWrite,
;;;104                                   uint8_t* pBuffer)
;;;105    {
;;;106    	#if defined (I2C_ANALOG)
;;;107    	
;;;108    	I2C_ANALOG_WriteMulti(DeviceAddr, RegisterAddr, pBuffer, NumByteToWrite);
;;;109    	
;;;110    	#else
;;;111    
;;;112    	I2C_WriteMultiBytesOneReg(I2C0, DeviceAddr, RegisterAddr, pBuffer, NumByteToWrite);	
000002  9200              STR      r2,[sp,#0]
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  4801              LDR      r0,|L8.16|
00000a  f7fffffe          BL       I2C_WriteMultiBytesOneReg
;;;113    //	I2C_WriteByteOneReg(I2C0, DeviceAddr, RegisterAddr,*pBuffer);
;;;114    //	I2C_writeBytes(I2C0, DeviceAddr, RegisterAddr,NumByteToWrite,pBuffer);
;;;115    	
;;;116    	#endif
;;;117    }
00000e  bd08              POP      {r3,pc}
;;;118    
                          ENDP

                  |L8.16|
                          DCD      0x40080000

                          AREA ||i.SetupLIS3DH||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  SetupLIS3DH PROC
;;;118    
;;;119    void SetupLIS3DH(void)
000000  b538              PUSH     {r3-r5,lr}
;;;120    {
;;;121    	uint8_t data;
;;;122    
;;;123    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_WHO_AM_I, 1,&data);
000002  4c16              LDR      r4,|L9.92|
000004  6920              LDR      r0,[r4,#0x10]
000006  2518              MOVS     r5,#0x18
000008  4328              ORRS     r0,r0,r5
00000a  b2c0              UXTB     r0,r0
00000c  466b              MOV      r3,sp
00000e  2201              MOVS     r2,#1
000010  210f              MOVS     r1,#0xf
000012  f7fffffe          BL       LIS3DH_Read
;;;124    	printf("LIS3DH_WHO_AM_I_ADDR = 0x%X\r\n",data);
000016  4669              MOV      r1,sp
000018  7809              LDRB     r1,[r1,#0]
00001a  a011              ADR      r0,|L9.96|
00001c  f7fffffe          BL       __2printf
;;;125    	LIS3DH_Delay(5);
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       LIS3DH_Delay
;;;126    
;;;127    	LIS3DH_Read(LIS3DH_ADDRESS, LIS3DH_CTRL_REG1, 1,&data);
000026  6920              LDR      r0,[r4,#0x10]
000028  466b              MOV      r3,sp
00002a  4328              ORRS     r0,r0,r5
00002c  b2c0              UXTB     r0,r0
00002e  2201              MOVS     r2,#1
000030  2120              MOVS     r1,#0x20
000032  f7fffffe          BL       LIS3DH_Read
;;;128    	LIS3DH_Delay(5);	
000036  2005              MOVS     r0,#5
000038  f7fffffe          BL       LIS3DH_Delay
;;;129    	
;;;130    	data = 0x47;	
00003c  2047              MOVS     r0,#0x47
00003e  4669              MOV      r1,sp
000040  7008              STRB     r0,[r1,#0]
;;;131    	LIS3DH_Write(LIS3DH_ADDRESS, LIS3DH_CTRL_REG1, 1,&data);// ODR : 50Hz
000042  6920              LDR      r0,[r4,#0x10]
000044  466b              MOV      r3,sp
000046  4328              ORRS     r0,r0,r5
000048  b2c0              UXTB     r0,r0
00004a  2201              MOVS     r2,#1
00004c  2120              MOVS     r1,#0x20
00004e  f7fffffe          BL       LIS3DH_Write
;;;132    	LIS3DH_Delay(5);
000052  2005              MOVS     r0,#5
000054  f7fffffe          BL       LIS3DH_Delay
;;;133    }	
000058  bd38              POP      {r3-r5,pc}
;;;134    
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      0x40004880
                  |L9.96|
000060  4c495333          DCB      "LIS3DH_WHO_AM_I_ADDR = 0x%X\r\n",0
000064  44485f57
000068  484f5f41
00006c  4d5f495f
000070  41444452
000074  203d2030
000078  7825580d
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  416e676c          DCB      0x41,0x6e,0x67,0x6c
000004  655f4361          DCB      0x65,0x5f,0x43,0x61
000008  6c63756c          DCB      0x6c,0x63,0x75,0x6c
00000c  61746500          DCB      0x61,0x74,0x65,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  fCosPitch
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  FlagSwitch
000000  0000              DCB      0x00,0x00
                  LIS3DH_accx
000002  0000              DCW      0x0000
                  LIS3DH_accy
000004  0000              DCW      0x0000
                  LIS3DH_accz
000006  0000              DCW      0x0000
                  RollAng
000008  00000000          DCFS     0x00000000 ; 0
                  PitchAng
00000c  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  fNormAcc
                          DCD      0x00000000

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  fSinRoll
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  fCosRoll
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  fSinPitch
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\I2C_LIS3DH.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_I2C_LIS3DH_c_be560c2d____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_I2C_LIS3DH_c_be560c2d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_I2C_LIS3DH_c_be560c2d____REVSH|
#line 402
|__asm___12_I2C_LIS3DH_c_be560c2d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
